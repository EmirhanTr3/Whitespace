generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  displayname   String
  email         String    @unique
  password      String
  avatar        String?
  badges        String[]  @default([])
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  Member Member[] @ignore

  @@map(name: "users")
}

model Member {
  id    Int   @id
  user  User  @relation(fields: [id], references: [id])

  guild   Guild[]    @ignore
  guild2  Guild[]    @relation(name: "owner") @ignore
  Message Message[]  @ignore

  @@map(name: "members")
}

model Guild {
  id         Int        @id @default(autoincrement())
  name       String
  icon       String?
  channels   Channel[]
  members    Member[]
  ownerId    Int        @map(name: "owner_id")
  owner      Member     @relation(name: "owner", fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now()) @map(name: "created_at")

  @@map(name: "guilds")
}

model Channel {
  id        Int        @id @default(autoincrement())
  name      String
  guildId   Int        @map(name: "guild_id")
  guild     Guild      @relation(fields: [guildId], references: [id], onDelete: Cascade)
  messages  Message[]
  createdAt DateTime   @default(now()) @map(name: "created_at")

  @@map(name: "channels")
}

model Message {
  id         Int      @id @default(autoincrement())
  channelId  Int      @map(name: "channel_id")
  channel    Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  authorId   Int      @map(name: "author_id")
  author     Member   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content    String
  createdAt  DateTime @default(now()) @map(name: "created_at")

  @@map(name: "messages")
}